{"version":3,"sources":["component/Header.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["ActionButton","Icon","text","action","active","role","tabIndex","className","onClick","onKeyDown","ev","key","size","TextBox","children","style","width","fontSize","color","height","Vsep","Hsep","Space","Header","title","dummyAction","alert","app","FaPlus","FaEdit","FaFileImport","FaSave","FaUndo","FaRedo","FaTrash","ImZoomOut","ImZoomIn","BiReset","FaDownload","FaFileExport","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf5cb608.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css';\n\nconst ActionButton = ({\n    Icon, text, action, active,\n}) => (\n    <div\n        role=\"button\"\n        tabIndex={0}\n        className={`tool ${active ? 'active' : ''}`}\n        onClick={action}\n        onKeyDown={(ev) => ev.key === 13 && action()}\n    >\n        <div className=\"icon\"><Icon size=\"25\" /></div>\n        <div>{text}</div>\n    </div>\n);\n\nconst TextBox = ({ children }) => (\n    <div className=\"tool\" style={{ width: 'auto' }}>\n        <div className=\"middle tool-text-only\" style={{ fontSize: 16, color: '#888', height: '100%' }}>\n            {children}\n        </div>\n    </div>\n);\n\nconst Vsep = () => <div className=\"Vsep sep\" />;\nconst Hsep = () => <div className=\"hsep sep\" />;\nconst Space = () => <div className=\"space\" />;\n\nconst Header = ({ children, title }) => (\n    <header className=\"header\">\n        <section className=\"middle titlebar\">\n            {`${title} - DHGWorkflow Editor`}\n        </section>\n        <section className=\"toolbar\">\n            {children}\n        </section>\n        <Hsep />\n    </header>\n\n);\n\nexport {\n    Header, ActionButton, Vsep, Hsep, Space, TextBox,\n};\n","import React from 'react';\nimport './App.css';\nimport {\n    FaSave, FaUndo, FaRedo, FaTrash, FaFileExport, FaFileImport, FaPlus, FaDownload, FaEdit,\n} from 'react-icons/fa';\nimport { BiReset } from 'react-icons/bi';\nimport { ImZoomOut, ImZoomIn } from 'react-icons/im';\nimport {\n    Header, ActionButton, Vsep, Space, TextBox,\n} from './component/Header';\n\n// eslint-disable-next-line\nconst dummyAction = () => alert('Dummy Action activated.');\n\nconst app = () => (\n    <div>\n        <Header title=\"MyGraph\">\n            <ActionButton Icon={FaPlus} text=\"Node\" active action={dummyAction} />\n            <ActionButton Icon={FaEdit} text=\"Edit\" active action={dummyAction} />\n            <Vsep />\n            <ActionButton Icon={FaFileImport} text=\"Open\" active action={dummyAction} />\n            <ActionButton Icon={FaSave} text=\"Save\" active action={dummyAction} />\n            <Vsep />\n            <ActionButton Icon={FaUndo} text=\"Undo\" active action={dummyAction} />\n            <ActionButton Icon={FaRedo} text=\"Redo\" action={dummyAction} />\n            <Vsep />\n            <ActionButton Icon={FaTrash} text=\"Delete\" action={dummyAction} />\n            <Vsep />\n            <ActionButton Icon={ImZoomOut} text=\"In\" active action={dummyAction} />\n            <ActionButton Icon={ImZoomIn} text=\"Out\" active action={dummyAction} />\n            <ActionButton Icon={BiReset} text=\"Reset\" active action={dummyAction} />\n            <TextBox>100%</TextBox>\n            <Space />\n            <ActionButton Icon={FaDownload} text=\"JPG\" active action={dummyAction} />\n            <ActionButton Icon={FaDownload} text=\"PNG\" active action={dummyAction} />\n            <Vsep />\n            <ActionButton Icon={FaFileExport} text=\"Export\" />\n        </Header>\n        <section className=\"body\">\n            <div className=\"graph-container\" />\n        </section>\n    </div>\n);\n\nexport default app;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}