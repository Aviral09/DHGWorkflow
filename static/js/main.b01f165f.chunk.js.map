{"version":3,"sources":["config/cytoscape-style.js","config/cytoscape-options.js","functions/helpers.js","reducer/actionType.js","reducer/reducer.js","reducer/initialState.js","functions/graph-builder.js","functions/tailored-graph-builder.js","functions/core-graph-builder.js","graph.jsx","component/Modal.jsx","toolbarActions/toolbarFunctions.js","toolbarActions/toolbarList.js","component/Header.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["style","selector","width","height","shape","content","label","opacity","backgroundColor","options","zoomingEnabled","userZoomingEnabled","askColor","c","hex","Math","floor","random","toString","String","substr","actionType","OpenModal","CloseModal","reducer","state","action","type","T","ModelOpen","modelCallback","initialState","g","this","juncNodeId","cy","$","incomers","filter","juncNode","parNode","automove","nodesMatching","reposition","dragWith","node","pos","position","P","h","w","A","y","x","B","min","max","arr","abs","sort","a","b","when","src","dest","edge","edgeName","edgeColor","sourceEndpoint","destid","data","srcid","tid","Date","getTime","dispatcher","name","addNode","addEdge","addAutoMove","getRealNode","remove","window","cyx","sid","id","console","log","add","group","source","target","color","GraphComp","cytoscape","use","edgehandles","cyOptions","container","document","getElementById","props","cyFun","setCy","setDispatcher","cye","preview","handlePosition","complete","modifyNewEdge","React","Component","ReactModal","setAppElement","Modal","isOpen","closeModal","onSubmit","useState","curClass","setCurClass","elName","setElName","useEffect","setTimeout","handleCloseModal","contentLabel","onRequestClose","className","overlayClassName","e","preventDefault","onClick","aria-hidden","value","onChange","createNode","setState","CyFun","dummyAction","alert","toolbarList","text","icon","FaPlus","active","FaEdit","FaFileImport","FaSave","FaUndo","FaRedo","FaTrash","ImZoomOut","ImZoomIn","BiReset","FaDownload","FaFileExport","ActionButton","Icon","tabIndex","role","onKeyDown","ev","key","size","Vsep","Hsep","Space","Header","title","map","tool","i","app","useReducer","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b01f165f.chunk.js","sourcesContent":["const style = [\n    {\n        selector: 'node[type = \"ordin\"]',\n        style: {\n            width: 100,\n            height: 50,\n            shape: 'rectangle',\n            content: 'data(name)',\n            'background-color': '#fff',\n            'border-color': '#000',\n            'border-width': 3,\n            'text-valign': 'center',\n            'text-halign': 'center',\n        },\n    },\n\n    {\n        selector: 'edge',\n        style: {\n            'curve-style': 'bezier',\n            'target-arrow-shape': 'triangle',\n            'border-color': '#000',\n            'background-color': '#fff',\n            width: 4,\n            'line-color': '#000',\n            'target-arrow-color': '#000',\n        },\n    },\n    {\n        selector: 'edge[label]',\n        style: {\n            label: 'data(label)',\n            width: 3,\n            'edge-text-rotation': 'autorotate',\n            'text-margin-y': '10px',\n        },\n    },\n    {\n        selector: '.eh-handle',\n        style: {\n            'background-color': '#f00',\n            height: 20,\n            width: 20,\n            opacity: 0.5,\n        },\n    },\n    {\n        selector: 'node[type=\"special\"]',\n        style: {\n            width: 10,\n            height: 10,\n            backgroundColor: 'red',\n        },\n    },\n\n    // {\n    //     selector: '.eh-ghost-edge',\n    //     style: {\n    //         'background-color': 'rgba(0,255,255,0.5)',\n    //         'line-color': '#0f0',\n    //         'target-arrow-color': '#0f0',\n    //     },\n    // },\n];\n\nexport default style;\n","import style from './cytoscape-style';\n\nconst options = {\n    style: [...style],\n    zoomingEnabled: false,\n    userZoomingEnabled: false,\n};\n\nexport default options;\n","function askColor() {\n    function c() {\n        const hex = Math.floor(Math.random() * 256).toString(16);\n        return (`0${String(hex)}`).substr(-2); // pad with zero\n    }\n    return `#${c()}${c()}${c()}`;\n}\n\nexport default askColor;\n","const actionType = {\n    OpenModal: 'OpenModal',\n    CloseModal: 'CloseModal',\n};\nexport default actionType;\n","import T from './actionType';\n\nconst reducer = (state, action) => {\n    if (action.type === T.OpenModal) {\n        return { ...state, ModelOpen: true, modelCallback: action.modelCallback };\n    }\n    if (action.type === T.CloseModal) {\n        return { ...state, ModelOpen: false };\n    }\n    return state;\n};\nexport default reducer;\n","const initialState = {\n    ModelOpen: false,\n};\n\nexport default initialState;\n","import TailoredGraphBuilder from './tailored-graph-builder';\n\nconst g = new TailoredGraphBuilder();\n\nexport default g;\n","/* eslint-disable no-alert */\n\nimport askColor from './helpers';\nimport CoreGraph from './core-graph-builder';\nimport { actionType as T } from '../reducer';\n\nclass TailoredGraph extends CoreGraph {\n    addTestData() {\n        return this;\n        // this.addNode('A', {}, 'ordin', { x: 100, y: 100 }, 1);\n        // this.addNode('B', {}, 'ordin', { x: 500, y: 100 }, 2);\n        // this.adE2(1, 2, 'ordin', '#f0f');\n    }\n\n    getRealNode(juncNodeId) {\n        return this.cy.$(`#${juncNodeId}`).incomers().filter('node')[0];\n    }\n\n    addAutoMove(juncNode, parNode) {\n        this.cy.automove({\n            nodesMatching: juncNode,\n            reposition: 'drag',\n            dragWith: parNode,\n        });\n        this.cy.automove({\n            nodesMatching: juncNode,\n            reposition(node) {\n                const pos = node.position();\n                const P = parNode.position();\n                const [h, w] = [parNode.height(), parNode.width()];\n                const A = { y: P.y + h / 2, x: P.x + w / 2 };\n                const B = { y: P.y - h / 2, x: P.x - w / 2 };\n                pos.x = Math.min(A.x, Math.max(pos.x, B.x));\n                pos.y = Math.min(A.y, Math.max(pos.y, B.y));\n                if (pos.x < A.x && pos.y < A.y && pos.x > B.x && pos.y > B.y) {\n                    const arr = [[Math.abs(pos.x - A.x), 'X', A.x],\n                        [Math.abs(pos.x - B.x), 'X', B.x],\n                        [Math.abs(pos.y - A.y), 'Y', A.y], [Math.abs(pos.y - B.y), 'Y', B.y]];\n                    arr.sort((a, b) => a[0] - b[0]);\n                    if (arr[0][1] === 'X') { [[, , pos.x]] = arr; }\n                    if (arr[0][1] === 'Y') { [[, , pos.y]] = arr; }\n                }\n                return pos;\n            },\n            when: 'matching',\n        });\n    }\n\n    modifyNewEdge(src, dest, edge) {\n        const position = edge.sourceEndpoint();\n        const destid = dest.data('id');\n        let srcid = src.data('id');\n        let edgeName;\n        let edgeColor;\n        if (src.data('type') !== 'special') {\n            const tid = (new Date()).getTime();\n            this.dispatcher({\n                type: T.OpenModal,\n                modelCallback: (name) => {\n                    edgeName = name;\n                    edgeColor = askColor();\n                    this.addNode('', { 'background-color': edgeColor },\n                        'special', position, tid, { edgeName, edgeColor });\n                    this.addEdge(srcid, tid, edgeName, edgeColor, { 'target-arrow-shape': 'none' });\n                    this.addAutoMove(this.cy.$(`#${tid}`), this.cy.$(`#${srcid}`));\n                    srcid = tid;\n                    this.getRealNode(tid);\n                    edge.remove();\n                    this.addEdge(srcid, destid, edgeName, edgeColor);\n                },\n            });\n        } else {\n            edgeName = src.data('edgeName');\n            edgeColor = src.data('edgeColor');\n            edge.remove();\n            this.addEdge(srcid, destid, edgeName, edgeColor);\n        }\n    }\n}\n\nexport default TailoredGraph;\n","/* eslint-disable no-console */\n\nclass CoreGraph {\n    setCy(cy) {\n        this.cy = cy;\n        window.cyx = cy;\n    }\n\n    setDispatcher(dispatcher) {\n        this.dispatcher = dispatcher;\n    }\n\n    addNode(name, style, type, position, sid, data) {\n        const id = sid || (new Date()).getTime();\n        console.log(name, type, id);\n        this.cy.add({\n            group: 'nodes',\n            data: {\n                id, name, type, ...data,\n            },\n            style,\n            position,\n        });\n    }\n\n    addEdge(source, target, name, color, style = {}) {\n        this.cy.add({\n            group: 'edges',\n            data: { source, target, label: name },\n            style: { ...style, 'line-color': color, 'target-arrow-color': color },\n        });\n    }\n\n    modifyNewEdge() { return this; }\n}\n\nexport default CoreGraph;\n","/* eslint-disable prefer-destructuring */\nimport React from 'react';\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport automove from 'cytoscape-automove';\nimport cyOptions from './config/cytoscape-options';\nimport cyFun from './functions/graph-builder';\n\nclass GraphComp extends React.Component {\n    componentDidMount() {\n        if (typeof cytoscape('core', 'edgehandles') !== 'function') {\n            cytoscape.use(edgehandles);\n        }\n        if (typeof cytoscape('core', 'automove') !== 'function') {\n            cytoscape.use(automove);\n        }\n        this.cy = cytoscape({ ...cyOptions, container: document.getElementById('cy') });\n        const { dispatcher } = this.props;\n        cyFun.setCy(this.cy);\n        cyFun.setDispatcher(dispatcher);\n        window.cye = this.cy.edgehandles({\n            preview: false,\n            handlePosition() {\n                return 'none';\n            },\n            complete: (a, b, c) => cyFun.modifyNewEdge(a, b, c),\n        });\n        // cyFun.addTestData();\n    }\n\n    render() {\n        return (\n            <div style={{ height: '100%', width: '100%' }} id=\"cy\" />\n        );\n    }\n}\n\nexport default GraphComp;\n","import React, { useState, useEffect } from 'react';\nimport ReactModal from 'react-modal';\nimport './modal.css';\n\nReactModal.setAppElement('#root');\n\nconst Modal = ({ isOpen, closeModal, onSubmit }) => {\n    const [curClass, setCurClass] = useState('');\n    const [elName, setElName] = useState('');\n    useEffect(() => {\n        if (isOpen === true) {\n            setCurClass('closing');\n            setTimeout(() => {\n                setCurClass('');\n            }, 20);\n        }\n    }, [isOpen]);\n\n    const handleCloseModal = () => {\n        setCurClass('closing');\n        setElName('');\n        setTimeout(() => {\n            closeModal();\n        }, 400);\n    };\n\n    const submit = (e) => {\n        e.preventDefault();\n        onSubmit(elName);\n        handleCloseModal();\n    };\n\n    return (\n        <ReactModal\n            isOpen={isOpen}\n            contentLabel=\"onRequestClose Example\"\n            onRequestClose={handleCloseModal}\n            className=\"Modal\"\n            overlayClassName={`Overlay ${curClass}`}\n        >\n            <form onSubmit={submit}>\n                <div className={`modal-content ${curClass}`}>\n                    <div className=\"modal-header\">\n                        <div className=\"modal-title h4\">Modal heading</div>\n                        <button type=\"button\" className=\"close\" onClick={handleCloseModal}>\n                            <span aria-hidden=\"true\">×</span>\n                            <span className=\"sr-only\">Close</span>\n                        </button>\n                    </div>\n                    <input\n                        type=\"text\"\n                        value={elName}\n                        onChange={(e) => setElName(e.target.value)}\n                    />\n                    <div className=\"modal-body\">Woohoo, you&apos;re reading this text in a modal!</div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\">Close</button>\n                        <button type=\"submit\" className=\"btn btn-primary\">Save Changes</button>\n                    </div>\n                </div>\n            </form>\n        </ReactModal>\n    );\n};\nexport default Modal;\n","import CyFun from '../functions/graph-builder';\nimport { actionType as T } from '../reducer';\n\nconst createNode = (state, setState) => {\n    setState({\n        type: T.OpenModal,\n        modelCallback: (name) => {\n            CyFun.addNode(name, {}, 'ordin', { x: 100, y: 100 });\n        },\n    });\n};\n// eslint-disable-next-line no-alert\nconst dummyAction = (x) => alert(x);\n\nexport { createNode, dummyAction };\n","/* eslint-disable object-curly-newline */\nimport { BiReset } from 'react-icons/bi';\nimport { ImZoomOut, ImZoomIn } from 'react-icons/im';\nimport {\n    FaSave, FaUndo, FaRedo, FaTrash, FaFileExport, FaFileImport, FaPlus, FaDownload, FaEdit,\n} from 'react-icons/fa';\nimport { dummyAction, createNode } from './toolbarFunctions';\n\nconst toolbarList = () => [\n    { type: 'action', text: 'Node', icon: FaPlus, action: createNode, active: true },\n    { type: 'vsep' },\n    { type: 'action', text: 'Edit', icon: FaEdit, action: dummyAction, active: true },\n    { type: 'action', text: 'Open', icon: FaFileImport, action: dummyAction, active: true },\n    { type: 'action', text: 'Save', icon: FaSave, action: dummyAction, active: true },\n    { type: 'vsep' },\n    { type: 'action', text: 'Undo', icon: FaUndo, action: dummyAction, active: true },\n    { type: 'action', text: 'Redo', icon: FaRedo, action: dummyAction, active: true },\n    { type: 'vsep' },\n    { type: 'action', text: 'Delete', icon: FaTrash, action: dummyAction, active: true },\n    { type: 'vsep' },\n    { type: 'action', text: 'In', icon: ImZoomOut, action: dummyAction, active: true },\n    { type: 'action', text: 'Out', icon: ImZoomIn, action: dummyAction, active: true },\n    { type: 'action', text: 'Reset', icon: BiReset, action: dummyAction, active: true },\n    { type: 'space' },\n    { type: 'action', text: 'JPG', icon: FaDownload, action: dummyAction, active: true },\n    { type: 'action', text: 'PNG', icon: FaDownload, action: dummyAction, active: true },\n    { type: 'vsep' },\n    { type: 'action', text: 'Export', icon: FaFileExport, action: dummyAction, active: true },\n];\n\nexport default toolbarList;\n","import React from 'react';\nimport './header.css';\nimport toolbarList from '../toolbarActions/toolbarList';\n\nconst ActionButton = ({\n    Icon, text, action, active, tabIndex,\n}) => (\n    <div\n        role=\"button\"\n        tabIndex={tabIndex}\n        className={`tool ${active ? 'active' : ''}`}\n        onClick={action}\n        onKeyDown={(ev) => ev.key === 13 && action()}\n    >\n        <div className=\"icon\"><Icon size=\"25\" /></div>\n        <div>{text}</div>\n    </div>\n);\n\nconst TextBox = ({ children }) => (\n    <div className=\"tool\" style={{ width: 'auto' }}>\n        <div className=\"middle tool-text-only\" style={{ fontSize: 16, color: '#888', height: '100%' }}>\n            {children}\n        </div>\n    </div>\n);\n\nconst Vsep = () => <div className=\"Vsep sep\" />;\nconst Hsep = () => <div className=\"hsep sep\" />;\nconst Space = () => <div className=\"space\" />;\n\nconst Header = ({ title, state, dispatcher }) => (\n    <header className=\"header\">\n        <section className=\"middle titlebar\">\n            {`${title} - DHGWorkflow Editor`}\n        </section>\n        <section className=\"toolbar\">\n            {\n                toolbarList(state, dispatcher).map((tool, i) => {\n                    if (tool.type === 'vsep') return <Vsep key={`${`v${i}`}`} />;\n                    if (tool.type === 'space') return <Space key={`${`s${i}`}`} />;\n                    return (\n                        <ActionButton\n                            Icon={tool.icon}\n                            text={tool.text}\n                            active={tool.active}\n                            action={() => tool.action(state, dispatcher)}\n                            key={tool.text}\n                            tabIndex={i + 1}\n                        />\n                    );\n                })\n            }\n        </section>\n        <Hsep />\n    </header>\n\n);\n\nexport {\n    Header, ActionButton, Vsep, Hsep, Space, TextBox,\n};\n","import React, { useReducer } from 'react';\nimport './App.css';\nimport GraphComp from './graph';\nimport Modal from './component/Modal';\nimport { Header } from './component/Header';\nimport { reducer, initialState, actionType as T } from './reducer';\n\nconst app = () => {\n    const [state, dispatcher] = useReducer(reducer, initialState);\n    return (\n        <div>\n            <Modal\n                isOpen={state.ModelOpen}\n                closeModal={() => dispatcher({ type: T.CloseModal })}\n                onSubmit={state.modelCallback}\n            />\n            <Header title=\"MyGraph\" state={state} dispatcher={dispatcher} />\n            <section className=\"body\">\n                <div className=\"graph-container\">\n                    <GraphComp dispatcher={dispatcher} />\n                </div>\n            </section>\n        </div>\n    );\n};\n\nexport default app;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}